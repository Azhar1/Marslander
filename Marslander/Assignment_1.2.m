%Comparison of Euler, Verlet, Analytical Solution
%We compare timesteps between 0.01 and 2.1 step + 0.25


%time variables
starttime = 0; 		%start at time 0
endtime = 1000;		%we don't want to wait forever. 1 = 1s
dt = 0.01;			%has to be found empirically. We want it to be as big as possible while still producing stable results to enhance performance 1 = 1s
t = starttime;		%for first iteration
iterations = (endtime-starttime)/dt;


%physical variables
disp "Using physical variables"
mass = 1						%kg
x = 0							%meter. We assume the spring to be in stable position. Motion will be generated by applying a v0
v = 1							%meter/second. 
k = 1							%kg/s^2
a = 0

for j=0:8
	dt=j*0.25
	if dt==0
		dt=0.01
	endif
	
	printf("\nCalculations for %f \n",dt);
	iterations = (endtime-starttime)/dt
	x_verlet = zeros(iterations,1);	%initialize vectors to store the values of v and x 
	v_verlet = zeros(iterations,1);	%for later plotting
	t_verlet = zeros(iterations,1);
	x_euler = zeros(iterations,1);	%both for Euler and Verlet Integrations
	v_euler = zeros(iterations,1);
	t_euler = zeros(iterations,1);

	%Calculating Euler
	for i= 1:iterations
		%update trajectories
		x_euler(i)=x;
		v_euler(i)=v;
		t_euler(i)=t;
		%update symbols
		a=-k*x/mass;
		x=x+dt*v;
		v=v+dt*a;
		t=t+dt;
	end
	
	printf("Euler x: %f ,",x_euler(iterations));
	printf("v: %f \n",v_euler(iterations));

	%Calculating Verlet
	x_verlet(1)= x;
	v_verlet(1)= v;
	t_verlet(1)= 0;

	a=-k*x/mass;
	x_verlet(2)= x_verlet(1)+v_verlet(1)*dt+0.5*a*dt^2;
	t_verlet(2)= dt;

	%We use the mean value between two position points over time to get the speed. For accuracy, we use 
	%the previous and next value. This means that we have to calculate the next x value first. Thus the
	%speed calculation lags one td step behind.

	for i= 3:iterations
		%calculate current acceleration
		a=-k*x_verlet(i-1)/mass;
		%calculate new x
		x_verlet(i)= 2*x_verlet(i-1)-x_verlet(i-2)+(dt^2)*a;
		%calculate previous v
		v_verlet(i-1)= (x_verlet(i)-x_verlet(i-2))/(2*dt);
		t_verlet(i)=t_verlet(i-1)+dt;
	end
	
	printf("Verlet x: %f ,",x_verlet(iterations-1));
	printf("v: %f \n",v_verlet(iterations));
end